/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.jbduncan.adventofcode2022.day3;

import static com.google.common.collect.ImmutableList.toImmutableList;
import static com.google.common.collect.Iterables.getOnlyElement;
import static java.nio.charset.StandardCharsets.UTF_8;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

public final class App {

  public static void main(String[] args) throws IOException {
    execute(Arrays.asList(args), new PrintWriter(System.out, true, UTF_8));
  }

  static void execute(List<String> args, PrintWriter out) throws IOException {
    var inputFile = Path.of(args.get(0));
    boolean elfTrios = args.size() > 1 && args.get(1).equals("--elf-trios");

    if (elfTrios) {
      ImmutableList<String> groupsOfThreeRucksacks = toGroupsOfThreeRucksacks(inputFile);
      ImmutableList<Character> commonItemTypes =
          groupsOfThreeRucksacks.stream()
              .map(App::threeRucksacksToCommonItemType)
              .collect(toImmutableList());
      int totalScore = commonItemTypes.stream().mapToInt(App::toScore).sum();
      out.println(totalScore);
      return;
    }

    var rucksacks = Files.readAllLines(inputFile, UTF_8);
    ImmutableList<Character> commonItemTypes =
        rucksacks.stream().map(App::rucksackToCommonItemType).collect(toImmutableList());
    int totalScore = commonItemTypes.stream().mapToInt(App::toScore).sum();
    out.println(totalScore);
  }

  private static ImmutableList<String> toGroupsOfThreeRucksacks(Path inputFile) throws IOException {
    var contents = Files.readString(inputFile, UTF_8);
    ImmutableList.Builder<String> groupsOfThreeRucksacksBuilder = ImmutableList.builder();
    Iterable<String> rucksacks = contents.lines()::iterator;
    var currentElfTrio = new StringBuilder();
    int rucksacksProcessed = 0;
    for (var rucksack : rucksacks) {
      currentElfTrio.append(rucksack);
      rucksacksProcessed++;
      if (rucksacksProcessed == 3) {
        groupsOfThreeRucksacksBuilder.add(currentElfTrio.toString());
        currentElfTrio = new StringBuilder();
        rucksacksProcessed = 0;
      } else {
        currentElfTrio.append('\n');
      }
    }
    return groupsOfThreeRucksacksBuilder.build();
  }

  private static Character threeRucksacksToCommonItemType(String threeRucksacks) {
    Set<Character> rucksackIntersection =
        threeRucksacks
            .lines()
            .map(Lists::charactersOf)
            .map(Set::copyOf)
            .reduce(Sets::intersection)
            .orElseThrow();
    return getOnlyElement(rucksackIntersection);
  }

  private static Character rucksackToCommonItemType(String rucksack) {
    var firstCompartment = rucksack.substring(0, rucksack.length() / 2);
    var secondCompartment = rucksack.substring(rucksack.length() / 2);
    ImmutableSet<Character> firstCompartmentUniqueItemTypes = uniqueChars(firstCompartment);
    ImmutableSet<Character> secondCompartmentUniqueItemTypes = uniqueChars(secondCompartment);
    Set<Character> commonItemTypes =
        Sets.intersection(firstCompartmentUniqueItemTypes, secondCompartmentUniqueItemTypes);
    return getOnlyElement(commonItemTypes);
  }

  private static ImmutableSet<Character> uniqueChars(String string) {
    return ImmutableSet.copyOf(Lists.charactersOf(string));
  }

  private static int toScore(Character commonItemType) {
    return commonItemType >= 'A' && commonItemType <= 'Z'
        ? commonItemType - 38
        : commonItemType - 96;
  }
}
